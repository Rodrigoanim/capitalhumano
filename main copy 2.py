# Arquivo: main.py
# Youtube Analyzer - Agente IA para an치lise de v칤deos do YouTube
# comando: streamlit run main.py
# 04/03/2025 - 09:00 - vers칚o 1.2

import streamlit as st
import sqlite3
from datetime import datetime, timedelta
import time
import sys
import os
from pathlib import Path
import streamlit.components.v1 as components
from paginas.monitor import registrar_acesso  # Importa칞칚o para registro de atividades

# Defini칞칚o de caminhos
BASE_DIR = Path(__file__).parent  # Obt칠m o diret칩rio onde est치 o main.py
DATA_DIR = BASE_DIR / "data"
DB_PATH = DATA_DIR / "you_ana.db"

# Configura칞칚o da p치gina - deve ser a primeira chamada do Streamlit
st.set_page_config(
    page_title="Youtube Analyzer - Estude e Analise V칤deos",
    page_icon="游꿟",
    layout="wide",
    menu_items={
        'About': """
        ### Sobre o Sistema - Youtube Analyzer
        
        Vers칚o: 1.0.0 Beta
        
        Este sistema foi desenvolvido para ajudar a estudar, internalizar 
        e analisar v칤deos do YouTube de forma eficiente.
        
        춸 2025 Todos os direitos reservados.
        """,
        'Get Help': None,
        'Report a bug': None
    },
    initial_sidebar_state="expanded"
)

# Atualizar metadados Open Graph
# components.html(
#     """
#     <head>
#         <title>Youtube Analyzer - Estude e Analise V칤deos</title>
#         <meta charset="utf-8">
#         <meta name="viewport" content="width=device-width, initial-scale=1">
#         <meta name="description" content="Ferramenta de IA para an치lise e estudo de v칤deos do YouTube">
#         <!-- Open Graph / Facebook -->                
#         <meta property="og:type" content="website">
#         <meta property="og:url" content="https://youtube-analyzer.render.com/">
#         <meta property="og:title" content="Youtube Analyzer - Estude e Analise V칤deos">
#         <meta property="og:description" content="Ferramenta de IA para an치lise e estudo de v칤deos do YouTube">
#         <meta property="og:image" content="https://example.com/youtube-analyzer.jpg">
#         <meta property="og:site_name" content="Youtube Analyzer">    
#         <!-- Adicional SEO -->
#         <meta name="author" content="Youtube Analyzer">
#         <meta name="keywords" content="youtube, an치lise de v칤deo, transcri칞칚o, IA, aprendizado">
#         <link rel="canonical" href="https://youtube-analyzer.render.com/">
#     </head>
#     """,
#     height=0,
#     width=0
# )

def authenticate_user():
    """Autentica o usu치rio e verifica seu perfil no banco de dados."""
    # Verifica se o banco existe
    if not DB_PATH.exists():
        st.error(f"Banco de dados n칚o encontrado em {DB_PATH}")
        return False, None
        
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    if "user_profile" not in st.session_state:
        st.session_state["user_profile"] = None

    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if "user_id" not in st.session_state:
        st.session_state["user_id"] = None

    if not st.session_state["logged_in"]:
        # Criar uma coluna centralizada
        col1, col2, col3 = st.columns([1, 20, 1])
        
        with col2:
            # Imagem de capa
            st.image("webinar_1.jpg", use_container_width=True)
            
        st.markdown("""
            <p style='text-align: center; font-size: 35px;font-weight: bold;'>Youtube Analyzer</p>
            <p style='text-align: center; font-size: 20px;'>Estude, Internalize e Analise V칤deos do YouTube</p>
        """, unsafe_allow_html=True)
        
        # Login na sidebar
        st.sidebar.title("Youtube Analyzer - vers칚o 1.1")
        email = st.sidebar.text_input("E-mail", key="email")
        password = st.sidebar.text_input("Senha", type="password", key="password", on_change=lambda: st.session_state.update({"enter_pressed": True}) if "password" in st.session_state else None)
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            login_button = st.button("Entrar") or st.session_state.get("enter_pressed", False)
            if "enter_pressed" in st.session_state:
                st.session_state.enter_pressed = False
        
        if login_button:
            cursor.execute("""
                SELECT id, user_id, perfil, nome FROM usuarios_tab WHERE email = ? AND senha = ?
            """, (email, password))
            user = cursor.fetchone()

            if user:
                st.session_state["logged_in"] = True
                st.session_state["user_profile"] = user[2]
                st.session_state["user_id"] = user[1]
                st.session_state["user_name"] = user[3]
                
                # Registrar o acesso bem-sucedido
                registrar_acesso(
                    user_id=user[1],
                    programa="main.py",
                    acao="login"
                )
                
                st.sidebar.success(f"Login bem-sucedido! Bem-vindo, {user[3]}.")
                st.rerun()
            else:
                st.sidebar.error("E-mail ou senha inv치lidos.")

    return st.session_state.get("logged_in", False), st.session_state.get("user_profile", None)

def get_timezone_offset():
    """
    Determina se 칠 necess치rio aplicar offset de timezone baseado no ambiente
    """
    is_production = os.getenv('RENDER') is not None
    
    if is_production:
        # Se estiver no Render, ajusta 3 horas para tr치s
        return datetime.now() - timedelta(hours=3)
    return datetime.now()  # Se local, usa hora atual

def show_welcome():
    """Exibe a tela de boas-vindas com informa칞칫es do usu치rio"""
    st.markdown("""
        <p style='text-align: left; font-size: 40px; font-weight: bold;'>Bem-vindo ao Youtube Analyzer!</p>
    """, unsafe_allow_html=True)
    
    # Buscar dados do usu치rio
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT email, empresa 
        FROM usuarios_tab 
        WHERE user_id = ?
    """, (st.session_state.get('user_id'),))
    user_info = cursor.fetchone()
    conn.close()
    
    empresa = user_info[1] if user_info and user_info[1] is not None else "N칚o informada"
    
    # Layout em colunas usando st.columns
    col1, col2, col3 = st.columns(3)
    
    # Coluna 1: Dados do Usu치rio
    with col1:
        st.markdown(f"""
            <div style="background-color: #e8f4f8; padding: 20px; border-radius: 8px;">
                <p style="color: #2c3e50; font-size: 24px;">Seus Dados</p>
                <div style="color: #34495e; font-size: 16px;">
                    <p>ID: {st.session_state.get('user_id')}</p>
                    <p>Nome: {st.session_state.get('user_name')}</p>
                    <p>E-mail: {user_info[0] if user_info else 'N/A'}</p>
                    <p>Empresa: {empresa}</p>
                    <p>Perfil: {st.session_state.get('user_profile')}</p>
                </div>
            </div>
        """, unsafe_allow_html=True)
    
    # Coluna 2: Atividades (atualizada com hora)
    with col2:
        current_time = get_timezone_offset()
        ambiente = "Produ칞칚o" if os.getenv('RENDER') else "Local"
        
        st.markdown(f"""
            <div style="background-color: #e8f8ef; padding: 20px; border-radius: 8px;">
                <p style="color: #2c3e50; font-size: 24px;">Suas Atividades</p>
                <div style="color: #34495e; font-size: 16px;">
                    <p>Data Atual: {current_time.strftime('%d/%m/%Y')}</p>
                    <p>Hora Atual: {current_time.strftime('%H:%M:%S')}</p>
                    <p>Ambiente: {ambiente}</p>
                </div>
            </div>
        """, unsafe_allow_html=True)
    
    # Coluna 3: M칩dulos
    with col3:
        modulos_html = """
            <div style="background-color: #fff8e8; padding: 20px; border-radius: 8px;">
                <p style="color: #2c3e50; font-size: 24px;">M칩dulos Dispon칤veis</p>
                <div style="color: #34495e; font-size: 16px;">
                    <p>Entrada de Dados - URL e Metadados</p>
                    <p>Captura de V칤deo e 츼udio</p>
                    <p>Transcri칞칚o de 츼udio</p>
                    <p>Analisador de Conte칰do</p>
                </div>
            </div>
        """
        
        st.markdown(modulos_html, unsafe_allow_html=True)

def main():
    """Gerencia a navega칞칚o entre as p치ginas do sistema."""
    # Verifica se o diret칩rio data existe
    if not DATA_DIR.exists():
        st.error(f"Pasta '{DATA_DIR}' n칚o encontrada. O programa n칚o pode continuar.")
        st.stop()
        
    # Verifica se o banco existe
    if not DB_PATH.exists():
        st.error(f"Banco de dados '{DB_PATH}' n칚o encontrado. O programa n칚o pode continuar.")
        st.stop()
        
    logged_in, user_profile = authenticate_user()
    
    if not logged_in:
        st.stop()
    
    # Armazenar p치gina anterior para compara칞칚o
    if "previous_page" not in st.session_state:
        st.session_state["previous_page"] = None
    
    # Titulo da p치gina
    st.markdown("""
        <p style='text-align: left; font-size: 44px; font-weight: bold;'>
            Youtube Analyzer - Estude e Analise V칤deos
        </p>
    """, unsafe_allow_html=True)

    # Adicionar informa칞칚o do usu치rio logado
    st.sidebar.markdown(f"""
        **Usu치rio:** {st.session_state.get('user_name')}  
        **ID:** {st.session_state.get('user_id')}  
        **Perfil:** {st.session_state.get('user_profile')}
    """)

    if st.sidebar.button("Logout"):
        # Registrar o logout antes de limpar a sess칚o
        if "user_id" in st.session_state:
            registrar_acesso(
                user_id=st.session_state["user_id"],
                programa="main.py",
                acao="logout"
            )
        
        for key in ['logged_in', 'user_profile', 'user_id', 'user_name']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()

    st.sidebar.title("Menu de Navega칞칚o")
    
    # Criando grupos de menu
    menu_groups = {
        "Principal": ["Bem-vindo"],
        "Ferramentas": [
            "Entrada de Dados - URL e Metadados",
            "Captura de V칤deo",
            "Transcri칞칚o de 츼udio",
            "Analisador de Conte칰do"
        ],
        "Administra칞칚o": []  # Iniciando vazio para adicionar itens na ordem correta
    }
    
    # Adicionar op칞칫es administrativas na ordem desejada
    if user_profile and user_profile.lower() == "master":
        menu_groups["Administra칞칚o"].append("Info Tabelas (CRUD)")
    if user_profile and user_profile.lower() == "master":
        menu_groups["Administra칞칚o"].append("Diagn칩stico")
    if user_profile and user_profile.lower() in ["adm", "master"]:
        menu_groups["Administra칞칚o"].append("Monitor de Uso")
    
    # Se n칚o houver op칞칫es de administra칞칚o, remover o grupo
    if not menu_groups["Administra칞칚o"]:
        menu_groups.pop("Administra칞칚o")
    
    # Criar seletor de grupo
    selected_group = st.sidebar.selectbox(
        "Selecione o m칩dulo:",
        options=list(menu_groups.keys()),
        key="group_selection"
    )
    
    # Criar seletor de p치gina dentro do grupo
    section = st.sidebar.radio(
        "Selecione a p치gina:",
        menu_groups[selected_group],
        key="menu_selection"
    )

    # Verificar se houve mudan칞a de p치gina
    if st.session_state.get("previous_page") != section:
        st.session_state["previous_page"] = section

    # Processa a se칞칚o selecionada
    if section == "Bem-vindo":
        show_welcome()
    elif section == "Entrada de Dados - URL e Metadados":
        from paginas.url_metadados import show_url_metadados
        show_url_metadados()
    elif section == "Captura de V칤deo":
        from paginas.video_capture import show_video_capture
        show_video_capture()
    elif section == "Transcri칞칚o de 츼udio":
        from paginas.transcribe_audio import show_transcribe_audio
        show_transcribe_audio()
    elif section == "Analisador de Conte칰do":
        from paginas.analyzer import show_analyzer
        show_analyzer()
    elif section == "Info Tabelas (CRUD)":
        from paginas.crude import show_crud
        show_crud()
    elif section == "Monitor de Uso":
        from paginas.monitor import main as show_monitor
        show_monitor()
    elif section == "Diagn칩stico":
        from paginas.diagnostico import show_diagnostics
        show_diagnostics()

if __name__ == "__main__":
    main()
